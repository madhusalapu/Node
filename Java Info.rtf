{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red106\green62\blue62;\red127\green0\blue85;}
{\*\expandedcolortbl;;\csgenericrgb\c41569\c24314\c24314;\csgenericrgb\c49804\c0\c33333;}
\margl1440\margr1440\vieww25400\viewh15520\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 23-09-18\
\
Collections\
\
\
ArrayList::\
========\
Collection (I)  \'97 > List (I) \'97 > ArrayList(C)\
1.2 collection\
1.5 Generics \
\
1.5 \
Collection<Integer> numbers = new ArrayList<Integer>();\
numbers.add(12);\
\
1.7 \
Collection<Integer> numbers = new ArrayList();\
\
Collection don\'92t works with index numbers., So can use List \
\
List<Integer> numbers = new ArrayList();\
\
\
\
1.Duplicate values \
2.Fetch the element orderly (How the insertion way)\
3.Add the elements based on index \
\
Set\
===\
Collection (I)  \'97 > Set (I) \'97 > HashSet(C)\
Collection (I)  \'97 > Set (I) \'97 > TreeSet(C)\
Implement HashSet, TreeSet\
\
HashSet\
Set<Cars> cars = new HashSet<>(); \
1. Don\'92t have the duplicate values.(Unique)\
2. If you fetch the element will get randomly.\
\
\
TreeSet\
1. Here get the orderly (Ascending order)\
Set<Cars> cars = new TreeSet<>();\
\
Maps\
=====\
\
1. Key and value\
\
Collection(I) \'97> Map (I) \'97> HashMap (C) a-synchronization \
Collection(I) \'97> Map (I) \'97> HashTable (C) synchronization \
\
Enhance For Loop\
\
int  nums = [1,23,34,45];\
\
for(int i : nums) \{\
	// i \'97 value \
\}\
\
Collections(C)\
\
Comparator(I) generic  Functional Interface (it\'92s have only method compare) \
\
\pard\pardeftab720\partightenfactor0

\f1\fs22 \cf0 Collections.sort(\cf2 numbers\cf0 , (\cf2 i1\cf0 , \cf2 i2\cf0 ) -> \{\
			\cf3 return\cf0  \cf2 i1\cf0 %10>\cf2 i2\cf0 %10 ? 1 : \cf2 i1\cf0 %10<\cf2 i2\cf0 %10 ? -1 : 0;\
		\});
\f0\fs24 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\
Comparable (I) It\'92s have the own implements in the class itself with overrides the compateTo method\
\
\
class Emp implements Comparatable<Emp> \{\
	private marks;\
\
	public Emp(int marks) \{\
		this.marks = marks;\
	\}\
\
	public int compareTo(Emp e) \{\
		return this.marks > e.marks ? 1 : this.marks < e.marks ? -1 : 0;\
	\}\
\}\
}